#!/usr/bin/env python3
import sys
sys.path.append('../')
sys.path.append('./')
import argparse
import os
import pkg_resources
from scagaire.Scagaire import Scagaire

version = ''
try:
	version = pkg_resources.get_distribution("scagaire").version
except pkg_resources.DistributionNotFound:
	version = 'x.y.z'

parser = argparse.ArgumentParser(
    description = '''Filter AMR results by species''',
    usage = 'scagaire [options] species amr_results',
    formatter_class=argparse.ArgumentDefaultsHelpFormatter)
    
parser.add_argument('species',  help='Species name, use scagaire_species to see all available. Multiple species can be passed in comma separated.', type=str)
parser.add_argument('input_file', help='Input file of AMR results from Abricate etc...', type=str)


# Inputs
parser.add_argument('--database', '-d',  help='Database of species to genes. Defaults to bundled', type=str )
parser.add_argument('--results_type', '-t',  help='Format of input results. Defaults to automatically detecting format.', choices=['abricate','rgi','staramr'], type=str )

# Output
parser.add_argument('--output_file', '-o',  help='Output filename, defaults to STDOUT', type=str)
parser.add_argument('--summary_file', '-s',  help='Output summary filename', default='gene_summary.tsv', type=str)

# Advanced
parser.add_argument('--overwrite_files', '-w', help='Silently overwrite output files if they already exist', default = False)
parser.add_argument('--minimum_occurances', '-m', help='Minimum number of occurances of a gene in the database to use', default = 0,  type=int)
parser.add_argument('--debug', action='store_true', help='Turn on debugging', default = False)
parser.add_argument('--verbose', '-v', action='store_true', help='Turn on verbose output', default = False)
parser.add_argument('--version', action='version', version=str(version))

options = parser.parse_args()

if options.debug:
    import cProfile, pstats, io
    pr = cProfile.Profile()
    pr.enable()
    
    g = Scagaire(options)
    g.run()
    
    pr.disable()
    s = io.StringIO()
    sortby = 'cumulative'
    ps = pstats.Stats(pr, stream=s).sort_stats(sortby)
    ps.print_stats()
    print(s.getvalue())
else:
    g = Scagaire(options) 
    g.run()
